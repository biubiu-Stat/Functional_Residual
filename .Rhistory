family=acat(reverse=TRUE, parallel=TRUE))
proby2<-fitted(model2)
####Deviance,pearson, ProbScale, Generalized and more###############
############## Yang's method##########################
listvec <- function(x) {
x[1]:x[2]
}
### \hat{U} y is the outcome, q0=P(y<=1), q1=P(y<=2)
marginm <- function(x, y, q0, q1, q2, q3,h) {
n <- length(y)
p1 <- cbind(q0, q1, q2, q3)
ind1 <- apply(abs(p1 - x), 1, which.min)
wei <- 1 * ((p1[cbind(1:n, ind1)] - x)^2 < 5 * h^2) *
(1 - ((p1[cbind(1:n, ind1)] - x)^2) / h^2 / 5)
l <- sum(wei * 1 * (y <= (ind1 - 1))) / sum(wei)
l
}
marginm <- Vectorize(marginm, "x")
### Bandwidth selection
bandwidthord <- function(y, q0, q1, q2, q3) {
bw <- npregbw(ydat = c(1 * (y == 0), 1 * (y <= 1), 1 * (y <= 2),
1 * (y <= 3)),
xdat = c(q0, q1, q2, q3), ckertype = "epanechnikov")
return(bw$bw)
}
q0_1<-proby1[, 1]
q1_1<-proby1[, 1]+proby1[, 2]
q2_1<-proby1[, 1]+proby1[, 2]+ proby1[, 3]
q3_1<-proby1[, 1]+proby1[, 2]+proby1[, 3]+proby1[, 4]
y_quasi <- y-1
h1 <- bandwidthord(y = y_quasi, q0 = q0_1, q1 = q1_1, q2=q2_1,q3=q3_1)
q0_2<-proby2[, 1]
q1_2<-proby2[, 1]+proby2[, 2]
q2_2<-proby2[, 1]+proby2[, 2]+ proby2[, 3]
q3_2<-proby2[, 1]+proby2[, 2]+proby2[, 3]+proby2[, 4]
h2 <- bandwidthord(y = y_quasi, q0 = q0_2, q1 = q1_2, q2=q2_2, q3=q3_2)
x_vals <- seq(0, 1, length.out = 100)
# Calculate y values using your marginm function
y_vals_2 <- marginm(x_vals, y = y_quasi,
q0 = q0_2, q1 = q1_2, q2 = q2_2, q3 = q3_2, h = h2)
y_vals_1 <- marginm(x_vals, y = y_quasi,
q0 = q0_1, q1 = q1_1, q2 = q2_1, q3 = q3_1, h = h1)
# Create a data frame for plotting
data <- data.frame(x = x_vals, y2= y_vals_2, y1=y_vals_1)
############## Probability-scale residuals ##########
sign1<-rep(0,length(x1))
sign2<-rep(0,length(x1))
P_sy1<-c()
P_sy2<-c()
P_gy1<-c()
P_gy2<-c()
i<-1
j<-1
y<-as.numeric(y)
for(i in 1: length(x1)){
if(y[i]!=1 && y[i]!=5){
P_sy1[i]<- sum(proby1[i,1:(y[i]-1)])
P_sy2[i]<- sum(proby2[i,1:(y[i]-1)])
P_gy1[i]<- sum(proby1[i,(y[i]+1):5])
P_gy2[i]<-sum(proby2[i,(y[i]+1):5])
}else{
if(y[i]==5){
P_gy1[i]<- 0
P_sy1[i]<- 1-proby1[i,5]
P_gy2[i]<- 0
P_sy2[i]<- 1-proby2[i,5]
}
if(y[i]==1){
P_sy1[i]<- 0
P_gy1[i]<- 1-proby1[i,1]
P_sy2[i]<- 0
P_gy2[i]<- 1-proby2[i,1]
}
}
sign1[i]<- P_gy1[i]-P_sy1[i]
sign2[i]<- P_gy2[i]-P_sy2[i]
}
############## Deviance residual######
deviance1<-resid(model1)[,1]
deviance2<-resid(model2)[,1]
############## Pearson residual########
pearson1<-resid(model1,type="pearson")[,1]
pearson2<-resid(model2,type="pearson")[,1]
############## Generalized residual #########
cum.prob1<-matrix(NA,nrow = nrow(proby1),ncol = ncol(proby1)+1)
cum.prob2<-matrix(NA,nrow = nrow(proby2),ncol = ncol(proby2)+1)
cum.prob1[,1]<-rep(0,nrow(proby1))
cum.prob2[,1]<-rep(0,nrow(proby1))
for (i in 2:6) {
cum.prob1[,i]<-cum.prob1[,i-1]+proby1[,i-1]
cum.prob2[,i]<-cum.prob2[,i-1]+proby2[,i-1]
}
Pj1<- sapply(1:n, function(x) proby1[x,y[x]])
Fj1<- sapply(1:n, function(x) cum.prob1[x,y[x]+1])
Fj1_1<- sapply(1:n, function(x) cum.prob1[x,y[x]])
fj1<- dnorm(qnorm(Fj1))
fj1_1<- dnorm(qnorm(Fj1_1))
g1<-(fj1_1-fj1)/Pj1
Pj2<- sapply(1:n, function(x) proby2[x,y[x]])
Fj2<- sapply(1:n, function(x) cum.prob2[x,y[x]+1])
Fj2_1<- sapply(1:n, function(x) cum.prob2[x,y[x]])
fj2<- dnorm(qnorm(Fj2))
fj2_1<- dnorm(qnorm(Fj2_1))
g2<-(fj2_1-fj2)/Pj2
otherres1<-cbind.data.frame(x3,sign1,deviance1,pearson1,g1)
otherres2<-cbind.data.frame(x3,sign2,deviance2,pearson2,g2)
############## Functional residual ####
fr1<-fresiduals(model1)
fr2<-fresiduals(model2)
############## Surrogate residual########################
y.f<-as.factor(y)
cummodel<-polr(y.f~x1,method = "logistic")
surro_cum<-PAsso::surrogate(cummodel)
summary(cummodel)
datasuro<-cbind.data.frame(surro_cum,x2,x3)
pcum_x2<-ggplot(datasuro, aes(x=x2, y=surro_cum)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-5,15)+
labs(title = "(c) Surrogate residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
pcum_x3<-ggplot(datasuro, aes(x=x3, y=surro_cum)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-5,15)+
labs(title = "(d) Surrogate residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
#######################Figure S4 Residual-vs-covariate plots before and after the interaction term is included#######################################
p1_norm<-fresplot(fr1,x3,title="(a) Functional residuals",scale = "normal",
xl=-5,xp=4,yl=-2,yp=2,
xlabs = expression(X[1]*X[2]))
p2_norm<-fresplot(fr2,x3,title="(b) Functional residuals",scale = "normal",
xlabs = expression(X[1]*X[2]),yl=-2,yp=2,xl=-5,xp=6)
p1_deviance_x3<-ggplot(otherres1, aes(x=x3, y=deviance1)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+
labs(title = "(c) Deviance residuals")+ylim(-600,600)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p1_pearson1_x3<-ggplot(otherres1, aes(x=x3, y=pearson1)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+
labs(title = "(e) Pearson residuals")+ylim(-21,21)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p1_PS_x3<-ggplot(otherres1, aes(x=x3, y=sign1)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-1,1)+
labs(title = "(e) Probability-scale residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p2_PS_x3<-ggplot(otherres2, aes(x=x3, y=sign2)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-1,1)+
labs(title = "(f) Probability-scale residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p1_gr_x3<-ggplot(otherres1, aes(x=x3, y=g1)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-3,3)+
labs(title = "(c) Generalized residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p2_gr_x3<-ggplot(otherres2, aes(x=x3, y=g2)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+ylim(-3,3)+
labs(title = "(d) Generalized residuals")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p_quasi1 <- ggplot(data, aes(x = x, y = y1)) +
geom_line(size = 2) + # Change 'size' for line width
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "(g)Quasi-empirical residual distribution function",
x = "s", y = expression(hat(U) * "(s)")) +
theme_bw() +xlim(0,1)+ylim(0,1)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p_quasi2 <- ggplot(data, aes(x = x, y = y2)) +
geom_line(size = 2) + # Change 'size' for line width
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "(h)Quasi-empirical residual distribution function",
x = "s", y = expression(hat(U) * "(s)")) +
theme_bw() +xlim(0,1)+ylim(0,1)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p2_deviance_x3<-ggplot(otherres2, aes(x=x3, y=deviance2)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+
labs(title = "(d) Deviance residuals")+ylim(-600,600)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
p2_pearson_x3<-ggplot(otherres2, aes(x=x3, y=pearson2)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab(expression(X[1]*X[2]))+ylab("")+
labs(title = "(f) Pearson residuals")+ylim(-21,21)+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
grid.arrange(p1_norm,p2_norm,p1_deviance_x3,p2_deviance_x3,
p1_pearson1_x3,p2_pearson_x3,ncol=2)
#######################Figure S22 Residual-vs-covariate plots comparison with newly developed methods########
grid.arrange(p1_norm,p2_norm,pcum_x2,pcum_x3,p1_PS_x3,p2_PS_x3,
p_quasi1,p_quasi2,ncol=2)
source("./R_functions/ffplot.R")
source("./R_functions/fresiduals.R")
source("./R_functions/fresplot.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(gridExtra)
library(gam)
set.seed(3)
n<-1000
px1<-rnorm(1000,0,1)
px2<-px1^2
plinearp<-1+0.2*px1+0.15*px2# link only for link function. linear predictor
plambda<-exp(plinearp)
py<-c()
for (i in 1:length(px1)) {
py[i]<-rpois(1,plambda[i])
}
pdata<-cbind.data.frame(px1,px2,py)
pmodel1<-glm(py~px1,family = "poisson",data = pdata)
pmodel2<-glm(py~px1+px2,family = "poisson",data = pdata)
#################### Functional residuals #############
fr1<-fresiduals(pmodel1)
fr2<-fresiduals(pmodel2)
#################### Deviance & Pearson residuals #############
deviance1<-resid(pmodel1,type="deviance")
pearson1<-resid(pmodel1,type="pearson")
deviance2<-resid(pmodel2,type="deviance")
pearson2<-resid(pmodel2,type="pearson")
d1<-cbind.data.frame(px1,deviance1)
d2<-cbind.data.frame(px1,deviance2)
p1<-cbind.data.frame(px1,pearson1)
p2<-cbind.data.frame(px1,pearson2)
#################### Figure S5 Plots of the functional residual and traditional residuals against the covariate########################
p2_unif<-fresplot(fr2,px1,title = "(a) Functional residuals on the uniform scale",scale = "uniform",
yl=0,yp=1,xl=-4,xp=4)
p2_norm<-fresplot(fr2,px1,title = "(b) Functional residuals on the normal scale",scale = "normal",
xl=-4,xp=4)
p1_norm_quard<-fresplot(fr1,px1,title = "(a)",scale = "normal",
xl=-3,xp=3)
p1_deviance<-ggplot(d1, aes(x=px1, y=deviance1)) +
geom_point()+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+theme(plot.title = element_text(size=12),axis.title=element_text(size=12))+
xlab("X")+ylab("")+labs(title="Deviance residuals")+ylim(-4,4)
p2_deviance<-ggplot(d2, aes(x=px1, y=deviance2)) +
geom_point()+theme(plot.title = element_text(size=12),axis.title=element_text(size=12))+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab("X")+ylab("")+labs(title="(c) Deviance Residuals")+ylim(-4,4)
p1_pearson<-ggplot(d1, aes(x=px1, y=pearson1)) +
geom_point()+theme(plot.title = element_text(size=12),axis.title=element_text(size=12))+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab("X")+ylab("")+labs(title="Pearson residuals")+ylim(-4,4)
p2_pearson<-ggplot(d2, aes(x=px1, y=pearson2)) +
geom_point()+theme(plot.title = element_text(size=12),axis.title=element_text(size=12))+
geom_smooth(method=loess, se=FALSE)+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
xlab("X")+ylab("")+labs(title="(d) Pearson residuals")+ylim(-4,4)
multiplot(p2_unif,p2_deviance,p2_norm,p2_pearson,cols=2)
#######################Figure S6 Fn-Fn plots when the working model is specified correctly########################
fullsampleff<-ffplot(fr2,title = "(a)")
lessthan0list<-which(px1<0)
lessthan0fr<-fr2[lessthan0list,]
lesssampleff<-ffplot(lessthan0fr,title = "(b)")
multiplot(fullsampleff,lesssampleff,cols=2)
set.seed(3)
px1<-rnorm(1000,0,0.5)
n <- 1000
px2<-px1^2
px3<-px1^3
plinearp<-0.8-0.2*px1+0.5*px2-0.5*px3# link only for link function. linear predictor
plambda<-exp(plinearp)
py<-c()
for (i in 1:length(px1)) {
py[i]<-rpois(1,plambda[i])
}
summary(py)
pmodel1<-glm(py~px1+px2,family = "poisson")
pmodel2<-glm(py~px1+px2+px3,family = "poisson")
fittedy1<-pmodel1$fitted.values
fittedy2<-pmodel2$fitted.values
#################### Functional residuals #############
fr1q<-fresiduals(pmodel1)
p1_norm_cubic<-fresplot(fr1q,px1,title = "(b) ",scale = "normal",
xl=-1.5,xp=1.5)
############################################################################
###########Figure S18 (a) quadratic term is not included ######
###########Figure S18 (b) cubic term is not included ########################
############################################################################
multiplot(p1_norm_quard,p1_norm_cubic,cols=2)
set.seed(3)
n<-1000
px1<-rnorm(1000,0,0.8)
plinearp<-1+1*px1# only for link function. linear predictor
plambda<-exp(plinearp)
p0<-exp(1+0.2*px1)/(exp(1+0.2*px1)+1)
py<-rzipois(n,lambda=plambda,pstr0 = p0)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)#Regular model
pmodel2<-zeroinfl(py~px1,data = pdata)# Zero-inflated Poisson model
#################### Functional residuals #############
zffr1<-fresiduals(pmodel1)
zffr2<-fresiduals(pmodel2)
#######################Figure S7 Functional-residual-vs-covariate plots and Fn-Fn plots in the presence of excessive zeros.########################
p2_norm<-fresplot(zffr2,px1,title = "(b) Zero-Inflated Poisson model",scale = "normal",
xl=-2.5,xp=2.5)
p1_norm<-fresplot(zffr1,px1,title = "(a) Regular Poisson model",scale = "normal",
xl=-2.5,xp=2.5)
ff1<-ffplot(zffr1,title = "(c) Regular Poisson model")
ff2<-ffplot(zffr2,title = "(d) Zero-Inflated Poisson model")
multiplot(p1_norm,ff1,p2_norm,ff2,cols=2)
#################################################################
############  Example 7 Dispersed Poisson Model #################
#################################################################
set.seed(3)
n<-1000
px1<-rnorm(1000,0,1)
rpois.od<-function (n, lambda,d) {
if (d==1)
rpois(n, lambda)
else
rnbinom(n, size=(lambda/(d-1)), mu=lambda)
}
plinearp<-1.2+1.3*px1# link only for link function. linear predictor
f<-7
plambda<-exp(plinearp)
mean(plambda)
py<-rpois.od(n,plambda,f)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)
pmodel2<-glm(py~px1,family = quasipoisson)
#################### Functional residuals ##################
overfr1<-fresiduals(pmodel1)
overfr2<-fresiduals(pmodel2)
####################### Figure S8 Functional-residual-vs-covariate plots and Fn-Fn plots in the presence of over-dispersion.########################
p2_norm<-fresplot(overfr2,px1,title = "(b) Quasi-Poisson model",scale = "normal",
xl=-2.5,xp=2.8)
p1_norm<-fresplot(overfr1,px1,title = "(a) Regular Poisson model",scale = "normal",
xl=-2.5,xp=2.8)
ff1<-ffplot(overfr1,title = "(c) Regular Poisson model")
ff2<-ffplot(overfr2,title = "(d) Quasi-Poisson model")
grid.arrange(p1_norm,p2_norm,ff1,ff2,nrow=2)
p2_norm<-fresplot(overfr2,px1,title = "(b) Quasi-Poisson model",scale = "normal",
xl=-2.5,xp=2.8,yl=-3,yp=3)
p1_norm<-fresplot(overfr1,px1,title = "(a) Regular Poisson model",scale = "normal",
xl=-2.5,xp=2.8,yl=-3,yp=3)
ff1<-ffplot(overfr1,title = "(c) Regular Poisson model")
ff2<-ffplot(overfr2,title = "(d) Quasi-Poisson model")
grid.arrange(p1_norm,p2_norm,ff1,ff2,nrow=2)
#################################################################
############# Example 8 Semi-parametric Poisson model############
#################################################################
set.seed(3)
n<-1000
px1<-rnorm(1000,0,1)
rpois.od<-function (n, lambda,d) {
if (d==1)
rpois(n, lambda)
else
rnbinom(n, size=(lambda/(d-1)), mu=lambda)
}
plinearp<-1.2+1.3*sin(px1)-0.8*px1# link only for link function. linear predictor
f<-7 # over dispersion parameter
plambda<-exp(plinearp)
mean(plambda)
py<-rpois.od(n,plambda,f)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)
# regular Poisson model
pmodel2<-gam(py~s(px1),family = poisson(link=log),data = pdata)
# Generalized additive Poisson model
pmodel3_gam<-gam(py~s(px1),family = quasipoisson,data = pdata)
# Generalized additive Quasi-Poisson model
gamfr1<-fresiduals(pmodel1)
gamfr2<-fresiduals(pmodel2)
gamfr3<-fresiduals(pmodel3_gam)
####################### Figure S9 Functional-residual-vs-covariate plots ((a)-(c)) and Fn-Fn plots ((d)-(f)) for
####################### building a semiparametric model for count data with a sine effect of the predictor ##################
p2_norm<-fresplot(gamfr2,px1,title = "(b) Generalized additive Poisson model",scale = "normal",
xl=-2.5,xp=3,yl=-3,yp=3,xlabs = "")
p1_norm<-fresplot(gamfr1,px1,title = "(a) Regular Poisson model",scale = "normal",
xl=-2.5,xp=3,yl=-3,yp=3,xlabs = "")
p3_norm<-fresplot(gamfr3,px1,title = "(c) Generalized additive quasi-Poisson model",scale = "normal",
xl=-2.5,xp=3,yl=-3,yp=3,xlabs = "")
ff1<-ffplot(gamfr1,title = "(d) Regular Poisson model")
ff2<-ffplot(gamfr2,title = "(e) Generalized additive Poisson model")
ff3<-ffplot(gamfr3,title = "(f) Generalized additive quasi-Poisson model")
grid.arrange(p1_norm,p2_norm,p3_norm,ff1,ff2,ff3,nrow=2)
##################################################################################
######################Example S2 Missing of a covariate############################
##################################################################################
set.seed(3)
n<-1000
px1<-rnorm(1000,0,0.8)
px2<-rnorm(1000,-1,1)
px3<-rnorm(1000,0.8,0.9)
plinearp<-0.5+0.25*px1+0.5*px2# link only for link function. linear predictor
plambda<-exp(plinearp)
py<-c()
for (i in 1:length(px1)) {
py[i]<-rpois(1,plambda[i])
}
pmodel1<-glm(py~px1,family = "poisson")
pmodel2<-glm(py~px1+px2,family = "poisson")
#################### Functional residuals ##################
fr1<-fresiduals(pmodel1)
fr2<-fresiduals(pmodel2)
##################### Figure S18 Functional-residual-vs-covariate plots when a covariate X2 is correlated
##################### with the count response Y#########################
p2_norm<-fresplot(fr2,px3,
title = "(b)",
scale = "normal",
xl=-2,xp=4,xlabs = expression(X[3]))
p1_norm<-fresplot(fr1,px2,
title = "(a)",
scale = "normal",
xl=-4,xp=2,xlabs = expression(X[2]))
multiplot(p1_norm,p2_norm,cols = 2)
##################################################################################
######################Example S3 Missing of the interaction term##################
##################################################################################
set.seed(33)
n<-1000
px1<-rnorm(n,0.5,1)
px2<-rnorm(n,-1,0.7)
px3<-px1*px2
plinearp<--0.1+0.8*px1-0.5*px2+0.6*px3# link only for link function. linear predictor
plambda<-exp(plinearp)
summary(plambda)
py<-c()
for (i in 1:length(px1)) {
py[i]<-rpois(1,plambda[i])
}
pmodel1<-glm(py~px1+px2,family = "poisson")
pmodel2<-glm(py~px1+px2+px3,family = "poisson")
#################### Functional residuals ##################
fr1<-fresiduals(pmodel1)
fr2<-fresiduals(pmodel2)
##################### Figure S19 Functional-residual-vs-covariate plots before and after the
##################### interaction term is included in the Poisson model for the count data#########################
p2_norm<-fresplot(fr2,px3,
title = "(b)",
scale = "normal",
xl=-4,xp=4,xlabs = expression(X[1]*X[2]))
p1_norm<-fresplot(fr1,px3,
title = "(a)",
scale = "normal",
xl=-4,xp=4,xlabs = expression(X[1]*X[2]))
multiplot(p1_norm,p2_norm,cols=2)
source("./R_functions/ffplot.R")
source("./R_functions/fresiduals.R")
source("./R_functions/fresplot.R")
source("./R_functions/ffplot.envelop.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(gridExtra)
library(gam)
set.seed(3)
########## Simulation for Overdispersion ##############
rpois.od<-function (n, lambda,d) {
rnbinom(n, size=(lambda/(d-1)), mu=lambda)
}
n<-1000
px1<-rnorm(1000,0,1)
t1<-seq(0,1,0.02)
plinearp<-1.2+1.3*px1# for link function. linear predictor
f<-7
plambda<-exp(plinearp)
py<-rpois.od(n,plambda,f)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)
pmodel2<-glm(py~px1,family = quasipoisson)
pa<-ffplot.envelop(model=pmodel1, B=2000, title = "(a) Regular Poisson model")
pb<-ffplot.envelop(model=pmodel2, B=2000, title = "(b) Quasi-Poisson model")
########### Simulation for Zero-inflated #############
set.seed(3)
n<-1000
t1<-seq(0,1,0.02)
px1<-rnorm(1000,0,0.8)
plinearp<-1+1*px1# link only for link function. linear predictor
plambda<-exp(plinearp)
p0<-exp(1+0.2*px1)/(exp(1+0.2*px1)+1)
py<-rzipois(n,lambda=plambda,pstr0 = p0)
pdata<-cbind.data.frame(px1,py)
pmodel1z<-glm(py~px1,family = poisson(link=log),data = pdata)
pmodel2z<-zeroinfl(py~px1,data = pdata)
pc<-ffplot.envelop(model=pmodel1z, B=2000, title = "(c) Regular Poisson model")
pd<-ffplot.envelop(model=pmodel2z, B=2000, title = "(d) Zero-inflated Poisson model")
###################### Figure S23 Fn-Fn plots with test envelops, depicted by dotted curves surrounding the solid
###################### curve, in the presence of overdispersion and zero-inflation.#############################################
grid.arrange(pa,pb,pc,pd,nrow=2)
