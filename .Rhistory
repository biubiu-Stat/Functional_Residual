theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
# Return the plot
return(p_norm)
}}
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(gridExtra)
library(gam)
#################################################################
############# Example 8 Semi-parametric Poisson model############
#################################################################
set.seed(3)
n<-1000
px1<-rnorm(1000,0,1)
rpois.od<-function (n, lambda,d) {
if (d==1)
rpois(n, lambda)
else
rnbinom(n, size=(lambda/(d-1)), mu=lambda)
}
plinearp<-1.2+1.3*sin(px1)-0.8*px1# link only for link function. linear predictor
f<-7 # over dispersion parameter
plambda<-exp(plinearp)
mean(plambda)
py<-rpois.od(n,plambda,f)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)
# regular Poisson model
pmodel2<-gam(py~s(px1),family = poisson(link=log),data = pdata)
# Generalized additive Poisson model
pmodel3_gam<-gam(py~s(px1),family = quasipoisson,data = pdata)
# Generalized additive Quasi-Poisson model
gamfr1<-fresiduals(pmodel1)
gamfr2<-fresiduals(pmodel2)
gamfr3<-fresiduals(pmodel3_gam)
#######################Figure S5##################
p2_norm<-fresplot(gamfr2,px1,title = "(b) Generalized additive Poisson model",scale = "normal",
xl=-2.5,xp=3,xlabs = "")
p1_norm<-fresplot(gamfr1,px1,title = "(a) Regular Poisson model",scale = "normal",
xl=-2.5,xp=3,xlabs = "")
p3_norm<-fresplot(gamfr3,px1,title = "(c) Generalized additive quasi-Poisson model",scale = "normal",
xl=-2.5,xp=3,xlabs = "")
ff1<-ffplot(gamfr1,title = "(d) Regular Poisson model")
ff2<-ffplot(gamfr2,title = "(e) Generalized additive Poisson model")
ff3<-ffplot(gamfr3,title = "(f) Generalized additive quasi-Poisson model")
#######################Figure S9########################
grid.arrange(p1_norm,p2_norm,p3_norm,ff1,ff2,ff3,nrow=2)
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(dplyr)
library(gridExtra)
library(mgcv)
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(dplyr)
library(gridExtra)
library(mgcv)
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
set.seed(3)
bikedata<-read.csv(here::here("./Real-data/hour.csv"))
### Select the data in 2012
bikedata<-bikedata %>%
filter(yr==1)
# Remove columns related to casual users and registered users, as they are not needed for this analysis
bikedata <- bikedata[, !grepl("casual", colnames(bikedata))]
bikedata <- bikedata[, !grepl("registered", colnames(bikedata))]
# Remove the "atemp" column to avoid redundancy of temp
bikedata <- bikedata[, !grepl("atemp", colnames(bikedata))]
# Remove the "yr" column (year), we select the data in 2012
bikedata <- bikedata[, !grepl("yr", colnames(bikedata))]
# Remove the "dteday" column (date), as they are not needed for this analysis
bikedata <- bikedata[, !grepl("dteday", colnames(bikedata))]
# Remove the "holiday" column, as holidays may not be considered for this analysis
bikedata <- bikedata[, !grepl("holiday", colnames(bikedata))]
# Remove the "instant" column
bikedata <- bikedata[, !grepl("instant", colnames(bikedata))]
# Remove the "mnth" column (month)
bikedata <- bikedata[, !grepl("mnth", colnames(bikedata))]
# Remove the "weekday" column, we have workday
bikedata <- bikedata[, !grepl("weekday", colnames(bikedata))]
### Create the winter variable
bikedata$winter<-ifelse(bikedata$season==1,1,0)
bikedata<-bikedata[,!grepl("season",colnames(bikedata))]
### Initial model with all the variables
model1<-glm(cnt~.,family = "poisson",data = bikedata)
## Functional residuals
fr1 <- fresiduals(model1)
#####Initial model for Table S3 #####
summary(model1)
fittedy1<-model1$fitted.values #predicted value
n<-length(fittedy1)
#bikeheatmapdata$repwinter<-bikeheatmapdata$repwinter+runif(nrow(bikeheatmapdata), -0.05, 0.05)
heatmap_winter<-fresplot(fr1,bikedata$winter,
title = "(e) winter",scale = "normal",xl=0,xp=1,
xlabs = "", heatmapcut=11)
heatmap_hour<-fresplot(fr1, bikedata$hr,
title = "(a) hour",scale = "normal",xl=0, xp=24,
xlabs = "", heatmapcut=11)
heatmap_workingday<-fresplot(fr1, bikedata$workingday,
title = "(f) workingday",scale = "normal",
xl=0, xp=1,
xlabs = "", heatmapcut=11)
heatmap_temp<-fresplot(fr1, bikedata$temp,
title = "(b) temp",scale = "normal",
xl=0, xp=1,
xlabs = "", heatmapcut=11)
heatmap_humidity<-fresplot(fr1, bikedata$hum,
title = "(c) humidity",scale = "normal",
xl=0.16, xp=1,
xlabs = "", heatmapcut=11)
heatmap_windspeed<-fresplot(fr1, bikedata$windspeed,
title = "(d) windspeed",scale = "normal",
xl=0, xp=0.8,
xlabs = "", heatmapcut=11)
model_gam<-gam(cnt~winter+s(hr)+workingday+weathersit+
s(temp)+s(hum)+s(windspeed),
family = poisson,
data = bikedata)
######### Functional residuals for Additive Poisson model
fr2<-fresiduals(model_gam)
heatmap2_norm_gam<-fresplot(fr2, bikedata$hr,
title = "(a) hour",scale = "normal",xl=0, xp=24,
xlabs = "", heatmapcut=11)
heatmap5_norm_gam<-fresplot(fr2, bikedata$temp,
title = "(b) temp",scale = "normal",
xl=0, xp=1,
xlabs = "", heatmapcut=11)
heatmap6_norm_gam<-fresplot(fr2, bikedata$hum,
title = "(c) humidity",scale = "normal",
xl=0.16, xp=1,
xlabs = "", heatmapcut=11)
heatmap7_norm_gam<-fresplot(fr2, bikedata$windspeed,
title = "(d) windspeed",scale = "normal",
xl=0, xp=0.8,
xlabs = "", heatmapcut=11)
model_gam_quasi<-gam(cnt~winter+s(hr)+workingday+weathersit+
s(temp)+s(hum)+s(windspeed),
family = quasipoisson,
data = bikedata)
fr3<- fresiduals(model_gam_quasi)
############### Final model for Table S3 ###############
summary(model_gam_quasi)
set.seed(3)
winternoise<-bikedata$winter+runif(8734,0,0.01)# add random noise for visualize the binary variable
heatmap_winter_gam_quasi<-fresplot(fr3,winternoise ,
title = "(e) winter",scale = "normal",xl=0,xp=1.01,
xlabs = "", heatmapcut=11)
heatmap_hour_gam_quasi<-fresplot(fr3, bikedata$hr,
title = "(a) hour",scale = "normal",xl=0, xp=24,
xlabs = "", heatmapcut=11)
heatmap_workingday_gam_quasi<-fresplot(fr3, bikedata$workingday,
title = "(f) workingday",scale = "normal",
xl=0, xp=1,
xlabs = "", heatmapcut=11)
heatmap_temp_gam_quasi<-fresplot(fr3, bikedata$temp,
title = "(b) temp",scale = "normal",
xl=0, xp=1,
xlabs = "", heatmapcut=11)
heatmap_humidity_gam_quasi<-fresplot(fr3, bikedata$hum,
title = "(c) humidity",scale = "normal",
xl=0.16, xp=1,
xlabs = "", heatmapcut=11)
heatmap_windspeed_gam_quasi<-fresplot(fr3, bikedata$windspeed,
title = "(d) windspeed",scale = "normal",
xl=0, xp=0.8,
xlabs = "", heatmapcut=11)
heatmap_winter_gam_quasi
ff3<-ffplot(fr3,title="(c) Final model")
fr3
ff3<-ffplot(fr3,title="(c) Final model")
ff3
bikedata<-read.csv("../Real-data/hour.csv")
set.seed(3)
bikedata<-read.csv("./Real-data/hour.csv")
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
library(Rmisc)
library(dplyr)
library(tidyr)
library(lubridate)
library(forecast)
library(tseries)
library(plyr)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(gridExtra)
library(mgcv)
library(tidyverse)
library(forecast)
library(tsibble)
library(tscount)
set.seed(3)
bikedata<-read.csv("./Real-data/hour.csv")
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
bikedata<-bikedata %>%
filter(yr==1)
bikedata<-bikedata[,!grepl("instant",colnames(bikedata))]
bikedata<-bikedata[,!grepl("casual",colnames(bikedata))]
bikedata<-bikedata[,!grepl("registered",colnames(bikedata))]
bikedata<-bikedata[,!grepl("atemp",colnames(bikedata))]
bikedata<-bikedata[,!grepl("yr",colnames(bikedata))]
bikedata<-bikedata[,!grepl("holiday",colnames(bikedata))]
bikedata$dteday <- as.Date(bikedata$dteday, format = "%Y-%m-%d")
bikedata$winter<-ifelse(bikedata$season==1,1,0)
bikedata<-bikedata[,!grepl("season",colnames(bikedata))]
bikedata$dteday<-as.Date(bikedata$dteday)
bikedata$hr<-as.numeric(bikedata$hr)
bikedata$hour<-bikedata$hr
bikedata <- bikedata %>% mutate(datetime=
as.POSIXct(as.character(paste(bikedata$dteday, bikedata$hr)),
format="%Y-%m-%d %H"))
bikedata<-bikedata[,!grepl("hr",colnames(bikedata))]
bikedata<-bikedata[,!grepl("dteday",colnames(bikedata))]
bikedata<-bikedata[,!grepl("mnth",colnames(bikedata))]
xpart<-bikedata %>% select(weekday,workingday,weathersit,temp,
windspeed,hum,winter)
##################################################################################
########################## N B Distribution ######################################
##################################################################################
modeltsnb1<-tsglm(bikedata$cnt,distr="nbinom",model=list(past_obs=1),
xreg = xpart,link = "log")
class(modeltsnb1)
family(modeltsnb1)
modeltsnb1$distr
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(dplyr)
library(gridExtra)
library(mgcv)
##########################################################################
##########################################################################
###################################build model############################
##########################################################################
##########################################################################
set.seed(3)
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
whitewine<-read.csv("../Real-data/winequality-white.csv",sep = ";")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(dplyr)
library(gridExtra)
library(mgcv)
##########################################################################
##########################################################################
###################################build model############################
##########################################################################
##########################################################################
set.seed(3)
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
whitewine<-read.csv("./Real-data/winequality-white.csv",sep = ";")
#alcohol+volatile.acidity+residual.sugar+free.sulfur.dioxide+density+pH+sulphates+fixed.acidity+citric.acid
model1<- vglm(quality~volatile.acidity+
alcohol+sulphates+fixed.acidity+
residual.sugar+free.sulfur.dioxide+
pH+density,
family=acat(reverse=TRUE, parallel=TRUE),data =whitewine)
################################Functional Residual for Initial Model###########
fr1 <- fresiduals(model1)
heatmap2_norm<-fresplot(fr1, whitewine$fixed.acidity,
title = "(a) fixed.acidity",scale = "normal",
xl=3, xp=15,
xlabs = "", heatmapcut=11)
heatmap2_norm
n<-nrow(model1@y)
probmodel1<-cbind.data.frame(rep(0,nrow(model1@y)),fitted(model1))
probrange1<-matrix(NA,nrow =nrow(model1@y) ,ncol=2)
y<-as.numeric(apply(model1@y, 1, function(t) colnames(model1@y)[which.max(t)]))
ordery<-y-min(y)+1
# range for the functional residual
for (i in 1:length(y)) {
probrange1[i,]<-c(sum(probmodel1[i,1:ordery[i]]),sum(probmodel1[i,1:(ordery[i]+1)]))
}
#######heatmap part
prenumber<-matrix(NA,nrow=n,ncol = 11)
for (h in 1:n) {
for (a in 1:ncol(prenumber)) {
prenumber[h,a]<-probrange1[h,1]+(probrange1[h,2]-probrange1[h,1])/10*(a-1)
}
}
prenumber_vector<-as.vector(prenumber)
q_prenumber_vector<-qnorm(prenumber_vector)
repchlorides<-rep(whitewine$chlorides,11)
repfixed.acidity<-rep(whitewine$fixed.acidity,11)
repvolatile.acidity<-rep(whitewine$volatile.acidity,11)
repcitric.acid<-rep(whitewine$citric.acid,11)
represidual.sugar<-rep(whitewine$residual.sugar,11)
repfree.sulfur.dioxide<-rep(whitewine$free.sulfur.dioxide,11)
reptotal.sulfur.dioxide<-rep(whitewine$total.sulfur.dioxide,11)
repdensity<-rep(whitewine$density,11)
reppH<-rep(whitewine$pH,11)
repsulphates<-rep(whitewine$sulphates,11)
repalcohol<-rep(whitewine$alcohol,11)
heatmapdata<-cbind.data.frame(repchlorides,repfixed.acidity,repvolatile.acidity,
repcitric.acid,represidual.sugar,
repfree.sulfur.dioxide,reptotal.sulfur.dioxide,
repdensity,reppH,repalcohol,repsulphates,q_prenumber_vector)
ggplot(heatmapdata, aes(repfixed.acidity,q_prenumber_vector)) +
stat_density_2d(aes(fill = stat(level)), geom = 'polygon') +
scale_fill_viridis_c(name = "density")+
geom_hline(yintercept=0,linetype="dashed", color = "red")+
geom_smooth(method = "loess",se=FALSE)+
xlab("")+ylab("")+
labs(title = "(a) fixed.acidity")+
theme(plot.title = element_text(size=12),axis.title=element_text(size=12))
#########################Figure 1############################
# Load the necessary library
library(ggplot2)
library(gridExtra)
# Define the parameters of the uniform distribution
a <- 0   # Lower bound
b <- 0.27   # Upper bound
# Create a sequence of values from the lower bound to the upper bound
x <- seq(a, 1, length.out = 1000)
# Calculate the CDF values for each x
cdf <- pmin(pmax((x - a) / (b - a), 0), 1)
# Create a data frame with x and CDF values
df <- data.frame(x, cdf)
# Plot the CDF using ggplot2
p_1.0<-ggplot(df, aes(x, cdf)) +
geom_line() +
labs(x = "t") +ylab("")+
ggtitle(expression(paste("(b) Res(t ; y = 0, x = 1)")))
c <- 0.95   # Lower bound
d <- 1   # Upper bound
# Create a sequence of values from the lower bound to the upper bound
x.2 <- seq(0, 1, length.out = 1000)
# Calculate the CDF values for each x
cdf.2 <- pmin(pmax((x.2 - c) / (d - c), 0), 1)
# Create a data frame with x and CDF values
df.2 <- data.frame(x.2, cdf.2)
# Plot the CDF using ggplot2
p__1.1<-ggplot(df.2, aes(x.2, cdf.2)) +
geom_line() +
labs(x = "t") + ylab("")+
ggtitle(expression(paste("(a) Res(t ; y = 1, x = -1)")))
grid.arrange(p__1.1,p_1.0,ncol=2)
#########################Figure 2############################
library(viridis)
library(MASS)
library(ggplot2)
library(ggpubr)
library(Rmisc)
library(plyr)
library(VGAM)
library(pscl)
library(ggpointdensity)
set.seed(3)
n<-998
ex<-rnorm(998,0,1)
ex<-sort(ex)
elink<--1+2*ex
py1<-exp(elink)/(exp(elink)+1)
ey<-c()
py<-cbind(1-py1,py1)
for (i in 1:length(ex)) {
ey[i] <- sample(c(0,1), 1, replace=TRUE, prob=py[i,])
}
x<-c(-1,1)
yobs<-c(1,0)
ex<-c(ex,x)
ey<-c(ey,yobs)
emodel<-glm(ey~ex,family = "binomial")
residuals.glm(emodel,type="pearson")[999:1000]
range1<-matrix(c(0.95,1,0,0.27),nrow=2,byrow = T)
range1<-as.data.frame(range1)
range1<-cbind(x,range1)
enumbers1<-matrix(NA,nrow=2,ncol = 101)
for (h in 1:2) {
for (a in 1:ncol(enumbers1)) {
enumbers1[h,a]<-range1[h,2]+(range1[h,3]-range1[h,2])/100*(a-1)
}
}
enumbers1<-as.vector(enumbers1)
exforplot<-rep(x,101)
plotdata<-cbind.data.frame(exforplot,enumbers1)
example_heat<-ggplot(plotdata, aes(exforplot,enumbers1)) +
geom_pointdensity(adjust=0.2,method="kde2d") +
scale_color_viridis(name = "density")+xlab("X")+ylab("")+xlim(-2,2)+
labs(title = "(a) Functional residuals")
example_heat
yfitted<-c(1-0.95,1-0.27)
pearsonresidual<-(yobs-yfitted)/sqrt(yfitted*(1-yfitted))
point2<-cbind.data.frame(x,pearsonresidual)
colnames(point2)<-c("X1","Point2")
point2forexample<-ggplot(point2, aes(x=X1, y=Point2)) +
geom_point()+
xlab("X")+ylab("")+xlim(-2,2)+
labs(title = "(b) Pearson (point) residuals")
grid.arrange(example_heat,point2forexample,ncol=2,widths = c(1/2.5,1/3))
#########################Figure 3############################
set.seed(3)
x= seq(-4,4, length.out = 1000)
y= dnorm(x)+0.1
library(shape)
library(grid)
par(mar=c(2,2,2,2))
par(mfrow=c(1,2))
plot(x, y, type='l', frame.plot = T, axes = F, ylab = "", xlab = "", lwd=2, ylim = c(0, 0.5))
axis(1, at= c(-5, -1.5, 0, 5), pos=0.08, tick = T, labels = F)
text(x=c(-1.5, 0), y= c(0.06, 0.06, 0.06), c(expression(y),expression(alpha+beta*x)))
lines(x= c(0, 0), y=c(0.07, dnorm(0)+0.5))
lines(x= c(-1.5, 0), y=c(dnorm(-1.5)+0.1, dnorm(-1.5)+0.1), lty=3, lwd=2)
lines(x=c(-1.5,-1.5) , y=c(0.08,dnorm(-1.5)+0.1), lty=3, lwd=2)
text(x=-0.75, y=dnorm(-1.5)+0.12, expression( r == y-(alpha+beta*x)),cex=1.2)
title(main = "(a) Point residual for continuous data",cex.main=1.8,sub=" ",adj=0)
x1 <- seq(-3,-1.38,length.out = 1000)
y1 <- rep(0.35,1000)
plot(x1,y1, type='l', frame.plot = T, axes = F, ylab = "", xlab = "", lwd=2, ylim = c(0, 0.5),xlim=c(-3,3))
axis(1, at= c(-3,-1.38 , 3), pos=0.1, tick = T, labels = F)
lines(x= c(-3, -1.38), y=c(0.35,0.35),col="red",lwd=8)
lines(x= c(-1.38, 3), y=c(0.35,0.35), lty=3, lwd=2)
lines(x= c(-1.38, -1.38), y=c(0.35,0.1), lty=3, lwd=2)
lines(x= c(-3, -3), y=c(0.35,0.1), lty=3, lwd=2)
lines(x= c(3, 3), y=c(0.35,0.1), lty=3, lwd=2)
text(x=c(-3,0,3), y= c(0.08, 0.08, 0.08),
c(0,expression(paste(pi,"(0;x) = 1/(",1+exp(alpha+beta*x),")",sep="")),1),cex=1.2)
text(x=-1.2, y=0.4, expression(paste("Res(t)=Pr{",u <= t,"|y=0}")),cex=1.5)
text(x=-2.19,y=0.37,"{",srt = 270,cex=10,family = 'Helvetica Neue UltraLight')
title(main = "(b) Functional residual for discrete data",cex.main=1.8,sub=" ",adj = 0)
##1250*550 width*height
source("./functions/ffplot.R")
source("./functions/fresiduals.R")
source("./functions/fresplot.R")
source("./functions/ffplot.envelop.R")
library(Rmisc)
library(plyr)
library(ggplot2)
library(VGAM)
library(pscl)
library(ggpointdensity)
library(MASS)
library(gridExtra)
library(gam)
set.seed(3)
########## Simulation for Overdispersion ##############
rpois.od<-function (n, lambda,d) {
rnbinom(n, size=(lambda/(d-1)), mu=lambda)
}
n<-1000
px1<-rnorm(1000,0,1)
t1<-seq(0,1,0.02)
plinearp<-1.2+1.3*px1# for link function. linear predictor
f<-7
plambda<-exp(plinearp)
py<-rpois.od(n,plambda,f)
pdata<-cbind.data.frame(px1,py)
pmodel1<-glm(py~px1,family = poisson(link=log),data = pdata)
pmodel2<-glm(py~px1,family = quasipoisson)
pa<-ffplot.envelop(model=pmodel1, B=2000, title = "(a) Regular Poisson model")
pb<-ffplot.envelop(model=pmodel2, B=2000, title = "(b) Quasi-Poisson model")
########### Simulation for Zero-inflated #############
set.seed(3)
n<-1000
t1<-seq(0,1,0.02)
px1<-rnorm(1000,0,0.8)
plinearp<-1+1*px1# link only for link function. linear predictor
plambda<-exp(plinearp)
p0<-exp(1+0.2*px1)/(exp(1+0.2*px1)+1)
py<-rzipois(n,lambda=plambda,pstr0 = p0)
pdata<-cbind.data.frame(px1,py)
pmodel1z<-glm(py~px1,family = poisson(link=log),data = pdata)
pmodel2z<-zeroinfl(py~px1,data = pdata)
pc<-ffplot.envelop(model=pmodel1z, B=2000, title = "(c) Regular Poisson model")
pd<-ffplot.envelop(model=pmodel2z, B=2000, title = "(d) Zero-inflated Poisson model")
###################### Figure S23 Fn-Fn plots with test envelops, depicted by dotted curves surrounding the solid
###################### curve, in the presence of overdispersion and zero-inflation.#############################################
grid.arrange(pa,pb,pc,pd,nrow=2)
